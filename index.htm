<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>US30 Weighted Bias Dashboard</title>
<style>
body { margin:0; font-family: Arial, sans-serif; background:#111; color:#eee; }
h1 { text-align:center; margin-top:16px; }
.pill { display:inline-block; padding:6px 12px; border-radius:999px; font-weight:600; }
.green{background:#22c55e; color:#111;}
.red{background:#f05252; color:#111;}
.neutral{background:#9aa4b2; color:#111;}
table { width:100%; border-collapse:collapse; margin-top:20px; font-size:13px; }
th, td { padding:8px; border-bottom:1px solid #333; text-align:right; }
th:first-child, td:first-child { text-align:left; }
th { color:#9aa4b2; text-transform:uppercase; font-size:11px; }
.bullish { color:#22c55e; }
.bearish { color:#f05252; }
.neutralText { color:#9aa4b2; }
#history { margin-top:20px; font-size:13px; }
#history h2 { text-align:center; margin-bottom:8px; }
</style>
</head>
<body>

<h1>US30 Weighted Bias Dashboard</h1>
<div style="text-align:center; margin-top:8px;">
  <span id="overallBias" class="pill neutral">Loading…</span>
</div>

<table>
  <thead>
    <tr>
      <th>Ticker</th>
      <th>Last</th>
      <th>Weight %</th>
      <th>EMA20</th>
      <th>EMA50</th>
      <th>Bias</th>
      <th>Weighted Score</th>
    </tr>
  </thead>
  <tbody id="stocksTable"></tbody>
</table>

<div id="history">
<h2>Bias History</h2>
<ul id="historyList"></ul>
</div>

<script>
// ===== CONFIG =====
const TICKERS = ["UNH","GS","MSFT","HD","AMGN","AAPL","BA","JNJ","MCD","JPM",
                 "CAT","IBM","V","TRV","WMT","DIS","NKE","MMM","HON","CVX",
                 "PG","KO","INTC","AXP","MRK","CSCO","VZ","CRM","DOW","WBA"];
const UPDATE_INTERVAL = 60000; // 60 sec
const API_KEY = "297ea220bf7f445c8c3cbb2d8418e28c"; // <-- Replace with your Twelve Data API key
let previousBias = null;

// ===== Notification Permission =====
if ("Notification" in window && Notification.permission !== "granted") {
    Notification.requestPermission();
}

// ===== Market Hours (fixed with Intl) =====
function isMarketOpenNY() {
  const parts = new Intl.DateTimeFormat('en-US', {
    timeZone: 'America/New_York',
    weekday: 'short',
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
  }).formatToParts(new Date()).reduce((acc, p) => {
    if (p.type) acc[p.type] = p.value;
    return acc;
  }, {});

  const weekdayStr = parts.weekday; // "Mon","Tue",...
  const hour = parseInt(parts.hour || '0', 10);
  const minute = parseInt(parts.minute || '0', 10);

  const dayIndex = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'].indexOf(weekdayStr);
  const timeMinutes = hour * 60 + minute;
  const open = 9 * 60 + 30;   // 09:30
  const close = 16 * 60;      // 16:00

  console.log(`NY time check → ${weekdayStr} ${hour}:${minute < 10 ? '0'+minute : minute}`); // debug
  return dayIndex >= 1 && dayIndex <= 5 && timeMinutes >= open && timeMinutes <= close;
}

// ===== EMA Calculation =====
function calculateEMA(prices, period) {
    const k = 2/(period+1);
    let ema = prices[0];
    for(let i=1;i<prices.length;i++) { ema = prices[i]*k + ema*(1-k); }
    return ema;
}

// ===== Fetch Real Intraday Data from Twelve Data =====
async function fetchIntraday(ticker){
    try{
        const res = await fetch(`https://api.twelvedata.com/time_series?symbol=${ticker}&interval=5min&outputsize=100&apikey=${API_KEY}`);
        const data = await res.json();
        if(data.status === "ok" && data.values){
            return data.values.reverse().map(p=>({time: new Date(p.datetime).getTime()/1000, value: parseFloat(p.close)}));
        } else {
            console.warn("Failed to fetch", ticker, data);
            return [];
        }
    }catch(err){
        console.warn("Fetch error", ticker, err);
        return [];
    }
}

// ===== History Load & Save =====
function saveBiasHistory(overall){
    let history = JSON.parse(localStorage.getItem('biasHistory')||'[]');
    const now = new Date().toLocaleString();
    history.push({time: now, bias: overall});
    if(history.length>50) history.shift();
    localStorage.setItem('biasHistory', JSON.stringify(history));
    renderHistory();
}

function renderHistory(){
    const history = JSON.parse(localStorage.getItem('biasHistory')||'[]');
    const list = document.getElementById('historyList');
    list.innerHTML = history.map(h=>`<li>${h.time}: <strong>${h.bias}</strong></li>`).join('');
}

// ===== Dashboard Update =====
async function updateDashboard(){
    if(!isMarketOpenNY()){
        document.getElementById('overallBias').textContent = "Market Closed";
        document.getElementById('overallBias').className = 'pill neutral';
        return;
    }

    const rows = [];
    let total = 0;

    for(const t of TICKERS){
        const hist = await fetchIntraday(t);
        if(hist.length<50) continue;
        const prices = hist.map(p=>p.value);
        const lastPrice = prices[prices.length-1];
        const ema20 = calculateEMA(prices.slice(-20),20);
        const ema50 = calculateEMA(prices.slice(-50),50);
        rows.push({t,lastPrice,ema20,ema50});
        total += lastPrice;
    }

    let html='';
    let score=0;
    rows.forEach(r=>{
        const weight = r.lastPrice/total;
        let b=0;
        if(r.lastPrice>r.ema20 && r.ema20>r.ema50) b=1;
        else if(r.lastPrice<r.ema20 && r.ema20<r.ema50) b=-1;
        score += b*weight;
        const biasTxt = b===1?'Bullish':b===-1?'Bearish':'Neutral';
        const biasCls = b===1?'bullish':b===-1?'bearish':'neutralText';
        html+=`<tr>
            <td>${r.t}</td>
            <td>${r.lastPrice.toFixed(2)}</td>
            <td>${(weight*100).toFixed(2)}%</td>
            <td>${r.ema20.toFixed(2)}</td>
            <td>${r.ema50.toFixed(2)}</td>
            <td class="${biasCls}">${biasTxt}</td>
            <td>${(b*weight).toFixed(3)}</td>
        </tr>`;
    });
    document.getElementById('stocksTable').innerHTML = html;

    let overall = 'Neutral';
    if(score>0.10) overall='Bullish';
    else if(score<-0.10) overall='Bearish';

    const overallEl = document.getElementById('overallBias');
    overallEl.textContent = `Overall Bias: ${overall} (score ${score.toFixed(3)})`;
    overallEl.className='pill '+(overall==='Bullish'?'green':overall==='Bearish'?'red':'neutral');

    if(previousBias!==null && overall!==previousBias){
        if("Notification" in window && Notification.permission==="granted"){
            new Notification("US30 Bias Changed",{body:`Bias flipped from ${previousBias} → ${overall}`});
            const audio = new Audio('https://www.soundjay.com/buttons/sounds/beep-07.mp3');
            audio.play();
        }
    }
    previousBias = overall;
    saveBiasHistory(overall);
}

// ===== Auto-update =====
renderHistory();
updateDashboard();
setInterval(updateDashboard,UPDATE_INTERVAL);

</script>
</body>
</html>
